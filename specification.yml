openapi: '3.0.3'
info:
  title: 'Six Cities'
  version: '1.0'
servers:
  - url: http://127.0.0.1:8000
paths:
  /offers:
    post:
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateOffer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          description: Bad Request
      tags:
        - Offers
    get:
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
      tags:
        - Offers
  /offers/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
      tags:
        - Offers
    put:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateOffer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          description: Bad Request
      tags:
        - Offers
    delete:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          description: Bad Request
      tags:
        - Offers
  /offers/premium/{cityName}:
    get:
      parameters:
        - name: cityName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
      tags:
        - Offers
  /offers/favourite:
    get:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
        '401':
          description: Unauthorized
      tags:
        - Favourite
  /offers/favourite/{id}:
    post:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '400':
          description: Bad Request
      tags:
        - Favourite
    delete:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
      tags:
        - Favourite
  /offers/{id}/comments:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
      tags:
        - Comments
    post:
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '400':
          description: Bad Request
      tags:
        - Comments

  /users/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Bad Request
        '409':
          description: Conflict
      tags:
        - Users
  /users/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Created
          content:
            application/json:
                schema:
                  type: object
                  properties:
                    access_token:
                      type: string
        '401':
          description: Unauthorized
      tags:
        - Users

  /users/check_session:
    get:
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPassword"
        '401':
          description: Unauthorized
      tags:
        - Users

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          maxLength: 12
    UserWithoutPassword:
      type: object
      required:
        - _id
        - name
        - email
        - type
        - createdAt
        - updateddAt
      properties:
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        updateddAt:
          type: string
          format: date-time
        name:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
        avatarUrl:
          type: string
        type:
          type: string
          enum:
            - Common
            - Pro
    User:
      type: object
      required:
        - _id
        - name
        - email
        - password
        - type
        - createdAt
        - updateddAt
      properties:
        _id:
          type: string
        createdAt:
          type: string
          format: date-time
        updateddAt:
          type: string
          format: date-time
        name:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
        avatarUrl:
          type: string
        password:
          type: string
          minLength: 6
          maxLength: 12
        type:
          type: string
          enum:
            - Common
            - Pro
    CreateUser:
      type: object
      required:
        - name
        - email
        - password
        - type
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
        avatarUrl:
          type: string
        password:
          type: string
          minLength: 6
          maxLength: 12
        type:
          type: string
          enum:
            - Common
            - Pro
    Comment:
      type: object
      required:
        - text
        - createdAt
        - rating
        - authorId
      properties:
        createdAt:
          type: string
          format: date-time
        text:
          type: string
          minLength: 5
          maxLength: 1024
        rating:
          type: number
          minimum: 0
          maximum: 5
        authorId:
          type: string
    CreateComment:
      type: object
      required:
        - text
        - rating
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
        rating:
          type: number
          minimum: 0
          maximum: 5
    Offer:
      type: object
      required:
        - _id
        - name
        - description
        - createdAt
        - city
        - previewUrl
        - imagesUrls
        - isPremium
        - rating
        - accommodationType
        - roomCount
        - guestCount
        - rentPrice
        - conveniences
        - authorId
        - commentCount
        - latitude
        - longitude
        - favouriteUsers
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        createdAt:
          type: string
          format: date-time
        city:
          type: string
          enum:
            - Paris
            - Cologne
            - Brussels
            - Amsterdam
            - Hamburg
            - Dusseldorf
        previewUrl:
          type: string
          format: uri
        imagesUrls:
          type: array
          minLength: 6
          maxLength: 6
          items:
            type: string
            format: uri
        isPremium:
          type: boolean
        isFavorite:
          type: boolean
        rating:
          type: number
          minimum: 0
          maximum: 5
        accommodationType:
          type: string
          enum:
            - apartment
            - house
            - room
            - hotel
        roomCount:
          type: integer
          minimum: 1
          maximum: 8
        guestCount:
          type: integer
          minimum: 1
          maximum: 10
        rentPrice:
          type: number
          minimum: 100
          maximum: 100000
        conveniences:
          type: array
          items:
            type: string
            enum:
              - Breakfast
              - Air conditioning
              - Laptop friendly workspace
              - Baby seat
              - Washer
              - Towels
              - Fridge
        authorId:
          type: string
        latitude:
          type: number
          minimum: -90
          maximum: 90
        longitude:
          type: number
          minimum: -180
          maximum: 180
        commentCount:
          type: integer
          minimum: 0
        favouriteUsers:
          type: array
          items:
            type: string
    CreateOrUpdateOffer:
      type: object
      required:
        - name
        - description
        - city
        - previewUrl
        - imagesUrls
        - isPremium
        - accommodationType
        - roomCount
        - guestCount
        - rentPrice
        - conveniences
        - latitude
        - longitude
      properties:
        name:
          type: string
          minLength: 10
          maxLength: 100
        description:
          type: string
          minLength: 20
          maxLength: 1024
        city:
          type: string
          enum:
            - Paris
            - Cologne
            - Brussels
            - Amsterdam
            - Hamburg
            - Dusseldorf
        previewUrl:
          type: string
          format: uri
        imagesUrls:
          type: array
          minLength: 6
          maxLength: 6
          items:
            type: string
            format: uri
        isPremium:
          type: boolean
        accommodationType:
          type: string
          enum:
            - apartment
            - house
            - room
            - hotel
        roomCount:
          type: integer
          minimum: 1
          maximum: 8
        guestCount:
          type: integer
          minimum: 1
          maximum: 10
        rentPrice:
          type: number
          minimum: 100
          maximum: 100000
        conveniences:
          type: array
          items:
            type: string
            enum:
              - Breakfast
              - Air conditioning
              - Laptop friendly workspace
              - Baby seat
              - Washer
              - Towels
              - Fridge
        latitude:
          type: number
          minimum: -90
          maximum: 90
        longitude:
          type: number
          minimum: -180
          maximum: 180
